/* eslint-disable */
// sequence-api v0.4.0 01e4e5d5ce5e7b85514f2db2fb5b346229db727c
// --
// Code generated by webrpc-gen@v0.25.3 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=api.ridl -target=typescript -client -out=./clients/api.gen.ts
export const WebrpcHeader = "Webrpc";
export const WebrpcHeaderValue = "webrpc@v0.25.3;gen-typescript@v0.17.0;sequence-api@v0.4.0";
// WebRPC description and code-gen version
export const WebRPCVersion = "v1";
// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.4.0";
// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "01e4e5d5ce5e7b85514f2db2fb5b346229db727c";
export function VersionFromHeader(headers) {
    const headerValue = headers.get(WebrpcHeader);
    if (!headerValue) {
        return {
            webrpcGenVersion: "",
            codeGenName: "",
            codeGenVersion: "",
            schemaName: "",
            schemaVersion: "",
        };
    }
    return parseWebrpcGenVersions(headerValue);
}
function parseWebrpcGenVersions(header) {
    const versions = header.split(";");
    if (versions.length < 3) {
        return {
            webrpcGenVersion: "",
            codeGenName: "",
            codeGenVersion: "",
            schemaName: "",
            schemaVersion: "",
        };
    }
    const [_, webrpcGenVersion] = versions[0].split("@");
    const [codeGenName, codeGenVersion] = versions[1].split("@");
    const [schemaName, schemaVersion] = versions[2].split("@");
    return {
        webrpcGenVersion: webrpcGenVersion ?? "",
        codeGenName: codeGenName ?? "",
        codeGenVersion: codeGenVersion ?? "",
        schemaName: schemaName ?? "",
        schemaVersion: schemaVersion ?? "",
    };
}
//
// Types
//
export var SortOrder;
(function (SortOrder) {
    SortOrder["DESC"] = "DESC";
    SortOrder["ASC"] = "ASC";
})(SortOrder || (SortOrder = {}));
export var SardinePaymentType;
(function (SardinePaymentType) {
    SardinePaymentType["ach"] = "ach";
    SardinePaymentType["debit"] = "debit";
    SardinePaymentType["credit"] = "credit";
    SardinePaymentType["us_debit"] = "us_debit";
    SardinePaymentType["international_debit"] = "international_debit";
    SardinePaymentType["international_credit"] = "international_credit";
})(SardinePaymentType || (SardinePaymentType = {}));
export var SardineQuoteType;
(function (SardineQuoteType) {
    SardineQuoteType["buy"] = "buy";
    SardineQuoteType["sell"] = "sell";
})(SardineQuoteType || (SardineQuoteType = {}));
export var GetLifiSwapRouteDirection;
(function (GetLifiSwapRouteDirection) {
    GetLifiSwapRouteDirection["to"] = "to";
    GetLifiSwapRouteDirection["from"] = "from";
})(GetLifiSwapRouteDirection || (GetLifiSwapRouteDirection = {}));
export var TokenType;
(function (TokenType) {
    TokenType["ERC20"] = "ERC20";
    TokenType["ERC721"] = "ERC721";
    TokenType["ERC1155"] = "ERC1155";
})(TokenType || (TokenType = {}));
export var TransakBuySell;
(function (TransakBuySell) {
    TransakBuySell["UNKNOWN"] = "UNKNOWN";
    TransakBuySell["BUY"] = "BUY";
    TransakBuySell["SELL"] = "SELL";
})(TransakBuySell || (TransakBuySell = {}));
export var TradeType;
(function (TradeType) {
    TradeType["EXACT_INPUT"] = "EXACT_INPUT";
    TradeType["EXACT_OUTPUT"] = "EXACT_OUTPUT";
})(TradeType || (TradeType = {}));
export var CheckoutOptionCrypto;
(function (CheckoutOptionCrypto) {
    CheckoutOptionCrypto["none"] = "none";
    CheckoutOptionCrypto["partially"] = "partially";
    CheckoutOptionCrypto["all"] = "all";
})(CheckoutOptionCrypto || (CheckoutOptionCrypto = {}));
export var CheckoutOptionNFTCheckoutProvider;
(function (CheckoutOptionNFTCheckoutProvider) {
    CheckoutOptionNFTCheckoutProvider["unknown"] = "unknown";
    CheckoutOptionNFTCheckoutProvider["sardine"] = "sardine";
    CheckoutOptionNFTCheckoutProvider["transak"] = "transak";
})(CheckoutOptionNFTCheckoutProvider || (CheckoutOptionNFTCheckoutProvider = {}));
export var CheckoutOptionOnRampProvider;
(function (CheckoutOptionOnRampProvider) {
    CheckoutOptionOnRampProvider["unknown"] = "unknown";
    CheckoutOptionOnRampProvider["sardine"] = "sardine";
    CheckoutOptionOnRampProvider["transak"] = "transak";
})(CheckoutOptionOnRampProvider || (CheckoutOptionOnRampProvider = {}));
export var CheckoutOptionSwapProvider;
(function (CheckoutOptionSwapProvider) {
    CheckoutOptionSwapProvider["unknown"] = "unknown";
    CheckoutOptionSwapProvider["lifi"] = "lifi";
})(CheckoutOptionSwapProvider || (CheckoutOptionSwapProvider = {}));
//
// Client
//
export class API {
    hostname;
    fetch;
    path = '/rpc/API/';
    constructor(hostname, fetch) {
        this.hostname = hostname.replace(/\/*$/, '');
        this.fetch = (input, init) => fetch(input, init);
    }
    url(name) {
        return this.hostname + this.path + name;
    }
    ping = (headers, signal) => {
        return this.fetch(this.url('Ping'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    version = (headers, signal) => {
        return this.fetch(this.url('Version'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    version: (_data.version),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    runtimeStatus = (headers, signal) => {
        return this.fetch(this.url('RuntimeStatus'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    clock = (headers, signal) => {
        return this.fetch(this.url('Clock'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    serverTime: (_data.serverTime),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getSequenceContext = (headers, signal) => {
        return this.fetch(this.url('GetSequenceContext'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    data: (_data.data),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getAuthToken = (args, headers, signal) => {
        return this.fetch(this.url('GetAuthToken'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                    jwtToken: (_data.jwtToken),
                    address: (_data.address),
                    user: (_data.user),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getAuthToken2 = (args, headers, signal) => {
        return this.fetch(this.url('GetAuthToken2'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                    jwtToken: (_data.jwtToken),
                    address: (_data.address),
                    user: (_data.user),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sendPasswordlessLink = (args, headers, signal) => {
        return this.fetch(this.url('SendPasswordlessLink'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    registerPublicKey = (args, headers, signal) => {
        return this.fetch(this.url('RegisterPublicKey'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getPublicKey = (args, headers, signal) => {
        return this.fetch(this.url('GetPublicKey'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    publicKey: (_data.publicKey),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    friendList = (args, headers, signal) => {
        return this.fetch(this.url('FriendList'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    page: (_data.page),
                    friends: (_data.friends),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getFriendByAddress = (args, headers, signal) => {
        return this.fetch(this.url('GetFriendByAddress'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                    friend: (_data.friend),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    searchFriends = (args, headers, signal) => {
        return this.fetch(this.url('SearchFriends'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    friends: (_data.friends),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    addFriend = (args, headers, signal) => {
        return this.fetch(this.url('AddFriend'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                    friend: (_data.friend),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    updateFriendNickname = (args, headers, signal) => {
        return this.fetch(this.url('UpdateFriendNickname'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                    friend: (_data.friend),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    removeFriend = (args, headers, signal) => {
        return this.fetch(this.url('RemoveFriend'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    contractCall = (args, headers, signal) => {
        return this.fetch(this.url('ContractCall'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    returns: (_data.returns),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    decodeContractCall = (args, headers, signal) => {
        return this.fetch(this.url('DecodeContractCall'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    call: (_data.call),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    lookupContractCallSelectors = (args, headers, signal) => {
        return this.fetch(this.url('LookupContractCallSelectors'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    signatures: (_data.signatures),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    userStorageFetch = (args, headers, signal) => {
        return this.fetch(this.url('UserStorageFetch'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    object: (_data.object),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    userStorageSave = (args, headers, signal) => {
        return this.fetch(this.url('UserStorageSave'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    ok: (_data.ok),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    userStorageDelete = (args, headers, signal) => {
        return this.fetch(this.url('UserStorageDelete'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    ok: (_data.ok),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    userStorageFetchAll = (args, headers, signal) => {
        return this.fetch(this.url('UserStorageFetchAll'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    objects: (_data.objects),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getMoonpayLink = (args, headers, signal) => {
        return this.fetch(this.url('GetMoonpayLink'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    signedUrl: (_data.signedUrl),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    resolveENSAddress = (args, headers, signal) => {
        return this.fetch(this.url('ResolveENSAddress'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    address: (_data.address),
                    ok: (_data.ok),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    isValidSignature = (args, headers, signal) => {
        return this.fetch(this.url('IsValidSignature'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    isValid: (_data.isValid),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    isValidMessageSignature = (args, headers, signal) => {
        return this.fetch(this.url('IsValidMessageSignature'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    isValid: (_data.isValid),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    isValidTypedDataSignature = (args, headers, signal) => {
        return this.fetch(this.url('IsValidTypedDataSignature'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    isValid: (_data.isValid),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    isValidETHAuthProof = (args, headers, signal) => {
        return this.fetch(this.url('IsValidETHAuthProof'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    isValid: (_data.isValid),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getOnRampURL = (args, headers, signal) => {
        return this.fetch(this.url('GetOnRampURL'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    url: (_data.url),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sardineGetClientToken = (headers, signal) => {
        return this.fetch(this.url('SardineGetClientToken'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    token: (_data.token),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sardineGetNFTCheckoutToken = (args, headers, signal) => {
        return this.fetch(this.url('SardineGetNFTCheckoutToken'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    resp: (_data.resp),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sardineGetNFTCheckoutOrderStatus = (args, headers, signal) => {
        return this.fetch(this.url('SardineGetNFTCheckoutOrderStatus'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    resp: (_data.resp),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sardineGetSupportedRegions = (headers, signal) => {
        return this.fetch(this.url('SardineGetSupportedRegions'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    regions: (_data.regions),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sardineGetSupportedFiatCurrencies = (headers, signal) => {
        return this.fetch(this.url('SardineGetSupportedFiatCurrencies'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    tokens: (_data.tokens),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sardineGetSupportedTokens = (headers, signal) => {
        return this.fetch(this.url('SardineGetSupportedTokens'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    tokens: (_data.tokens),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sardineGetSupportedTokenForSwap = (args, headers, signal) => {
        return this.fetch(this.url('SardineGetSupportedTokenForSwap'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    token: (_data.token),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sardineGetEnabledTokens = (headers, signal) => {
        return this.fetch(this.url('SardineGetEnabledTokens'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    tokens: (_data.tokens),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    sardineGetQuote = (args, headers, signal) => {
        return this.fetch(this.url('SardineGetQuote'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    quote: (_data.quote),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getSardineClientToken = (headers, signal) => {
        return this.fetch(this.url('GetSardineClientToken'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    token: (_data.token),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getSardineNFTCheckoutToken = (args, headers, signal) => {
        return this.fetch(this.url('GetSardineNFTCheckoutToken'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    resp: (_data.resp),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getSardineNFTCheckoutOrderStatus = (args, headers, signal) => {
        return this.fetch(this.url('GetSardineNFTCheckoutOrderStatus'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    resp: (_data.resp),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    transakGetCountries = (headers, signal) => {
        return this.fetch(this.url('TransakGetCountries'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    regions: (_data.regions),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    transakGetCryptoCurrencies = (headers, signal) => {
        return this.fetch(this.url('TransakGetCryptoCurrencies'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    currencies: (_data.currencies),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    transakGetFiatCurrencies = (headers, signal) => {
        return this.fetch(this.url('TransakGetFiatCurrencies'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    currencies: (_data.currencies),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    transakGetPrice = (args, headers, signal) => {
        return this.fetch(this.url('TransakGetPrice'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    price: (_data.price),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    transakGetSupportedNFTCheckoutChains = (headers, signal) => {
        return this.fetch(this.url('TransakGetSupportedNFTCheckoutChains'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    chains: (_data.chains),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getCoinPrices = (args, headers, signal) => {
        return this.fetch(this.url('GetCoinPrices'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    tokenPrices: (_data.tokenPrices),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getCollectiblePrices = (args, headers, signal) => {
        return this.fetch(this.url('GetCollectiblePrices'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    tokenPrices: (_data.tokenPrices),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getExchangeRate = (args, headers, signal) => {
        return this.fetch(this.url('GetExchangeRate'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    exchangeRate: (_data.exchangeRate),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    memoryStore = (args, headers, signal) => {
        return this.fetch(this.url('MemoryStore'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    ok: (_data.ok),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    memoryLoad = (args, headers, signal) => {
        return this.fetch(this.url('MemoryLoad'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    value: (_data.value),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getInviteInfo = (headers, signal) => {
        return this.fetch(this.url('GetInviteInfo'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    inviteInfo: (_data.inviteInfo),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    isValidAccessCode = (args, headers, signal) => {
        return this.fetch(this.url('IsValidAccessCode'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    internalClaimAccessCode = (args, headers, signal) => {
        return this.fetch(this.url('InternalClaimAccessCode'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    blockNumberAtTime = (args, headers, signal) => {
        return this.fetch(this.url('BlockNumberAtTime'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    blocks: (_data.blocks),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    paperSessionSecret = (args, headers, signal) => {
        return this.fetch(this.url('PaperSessionSecret'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    secret: (_data.secret),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    paperSessionSecret2 = (args, headers, signal) => {
        return this.fetch(this.url('PaperSessionSecret2'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    secret: (_data.secret),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    linkWallet = (args, headers, signal) => {
        return this.fetch(this.url('LinkWallet'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getLinkedWallets = (args, headers, signal) => {
        return this.fetch(this.url('GetLinkedWallets'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    linkedWallets: (_data.linkedWallets),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    removeLinkedWallet = (args, headers, signal) => {
        return this.fetch(this.url('RemoveLinkedWallet'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    generateWaaSVerificationURL = (args, headers, signal) => {
        return this.fetch(this.url('GenerateWaaSVerificationURL'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    nonce: (_data.nonce),
                    verificationURL: (_data.verificationURL),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    validateWaaSVerificationNonce = (args, headers, signal) => {
        return this.fetch(this.url('ValidateWaaSVerificationNonce'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    walletAddress: (_data.walletAddress),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    listAdoptedWallets = (args, headers, signal) => {
        return this.fetch(this.url('ListAdoptedWallets'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    page: (_data.page),
                    wallets: (_data.wallets),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getLifiChains = (headers, signal) => {
        return this.fetch(this.url('GetLifiChains'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    chains: (_data.chains),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getLifiTokens = (args, headers, signal) => {
        return this.fetch(this.url('GetLifiTokens'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    tokens: (_data.tokens),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getLifiSwapRoutes = (args, headers, signal) => {
        return this.fetch(this.url('GetLifiSwapRoutes'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    routes: (_data.routes),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getLifiSwapQuote = (args, headers, signal) => {
        return this.fetch(this.url('GetLifiSwapQuote'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    quote: (_data.quote),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getIntentCallsPayloads = (args, headers, signal) => {
        return this.fetch(this.url('GetIntentCallsPayloads'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    calls: (_data.calls),
                    preconditions: (_data.preconditions),
                    metaTxns: (_data.metaTxns),
                    trailsFee: (_data.trailsFee),
                    quote: (_data.quote),
                    originIntentAddress: (_data.originIntentAddress),
                    destinationIntentAddress: (_data.destinationIntentAddress),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    commitIntentConfig = (args, headers, signal) => {
        return this.fetch(this.url('CommitIntentConfig'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    config: (_data.config),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getIntentConfig = (args, headers, signal) => {
        return this.fetch(this.url('GetIntentConfig'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    config: (_data.config),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    listCurrencyGroups = (headers, signal) => {
        return this.fetch(this.url('ListCurrencyGroups'), createHTTPRequest({}, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    currencyGroups: (_data.currencyGroups),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    addOffchainInventory = (args, headers, signal) => {
        return this.fetch(this.url('AddOffchainInventory'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    inventoryId: (_data.inventoryId),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getOffchainInventory = (args, headers, signal) => {
        return this.fetch(this.url('GetOffchainInventory'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    inventory: (_data.inventory),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    listOffchainInventories = (args, headers, signal) => {
        return this.fetch(this.url('ListOffchainInventories'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    inventory: (_data.inventory),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    updateOffchainInventory = (args, headers, signal) => {
        return this.fetch(this.url('UpdateOffchainInventory'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {};
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    deleteOffchainInventory = (args, headers, signal) => {
        return this.fetch(this.url('DeleteOffchainInventory'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    ok: (_data.ok),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    requestOffchainPayment = (args, headers, signal) => {
        return this.fetch(this.url('RequestOffchainPayment'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    payment: (_data.payment),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    listOffchainPayments = (args, headers, signal) => {
        return this.fetch(this.url('ListOffchainPayments'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    page: (_data.page),
                    payments: (_data.payments),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    savePack = (args, headers, signal) => {
        return this.fetch(this.url('SavePack'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    merkleRoot: (_data.merkleRoot),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getPack = (args, headers, signal) => {
        return this.fetch(this.url('GetPack'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    pack: (_data.pack),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getPackIds = (args, headers, signal) => {
        return this.fetch(this.url('GetPackIds'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    packIds: (_data.packIds),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    deletePack = (args, headers, signal) => {
        return this.fetch(this.url('DeletePack'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    status: (_data.status),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    updatePackContent = (args, headers, signal) => {
        return this.fetch(this.url('UpdatePackContent'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    merkleRoot: (_data.merkleRoot),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getRevealTxData = (args, headers, signal) => {
        return this.fetch(this.url('GetRevealTxData'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    txData: (_data.txData),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    checkoutOptionsPrimary = (args, headers, signal) => {
        return this.fetch(this.url('CheckoutOptionsPrimary'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    options: (_data.options),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    checkoutOptionsSecondary = (args, headers, signal) => {
        return this.fetch(this.url('CheckoutOptionsSecondary'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    options: (_data.options),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    checkoutOptionsGetTransakContractID = (args, headers, signal) => {
        return this.fetch(this.url('CheckoutOptionsGetTransakContractID'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    contractId: (_data.contractId),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    fortePayCreateIntent = (args, headers, signal) => {
        return this.fetch(this.url('FortePayCreateIntent'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    resp: (_data.resp),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    fortePayGetPaymentStatuses = (args, headers, signal) => {
        return this.fetch(this.url('FortePayGetPaymentStatuses'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    statuses: (_data.statuses),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    getCCTPTransfer = (args, headers, signal) => {
        return this.fetch(this.url('GetCCTPTransfer'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    transfer: (_data.transfer),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
    queueCCTPTransfer = (args, headers, signal) => {
        return this.fetch(this.url('QueueCCTPTransfer'), createHTTPRequest(args, headers, signal)).then((res) => {
            return buildResponse(res).then(_data => {
                return {
                    transfer: (_data.transfer),
                };
            });
        }, (error) => {
            throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` });
        });
    };
}
const createHTTPRequest = (body = {}, headers = {}, signal = null) => {
    const reqHeaders = { ...headers, 'Content-Type': 'application/json' };
    reqHeaders[WebrpcHeader] = WebrpcHeaderValue;
    return {
        method: 'POST',
        headers: reqHeaders,
        body: JSON.stringify(body || {}),
        signal
    };
};
const buildResponse = (res) => {
    return res.text().then(text => {
        let data;
        try {
            data = JSON.parse(text);
        }
        catch (error) {
            let message = '';
            if (error instanceof Error) {
                message = error.message;
            }
            throw WebrpcBadResponseError.new({
                status: res.status,
                cause: `JSON.parse(): ${message}: response text: ${text}`
            });
        }
        if (!res.ok) {
            const code = (typeof data.code === 'number') ? data.code : 0;
            throw (webrpcErrorByCode[code] || WebrpcError).new(data);
        }
        return data;
    });
};
//
// Errors
//
export class WebrpcError extends Error {
    name;
    code;
    message;
    status;
    cause;
    /** @deprecated Use message instead of msg. Deprecated in webrpc v0.11.0. */
    msg;
    constructor(name, code, message, status, cause) {
        super(message);
        this.name = name || 'WebrpcError';
        this.code = typeof code === 'number' ? code : 0;
        this.message = message || `endpoint error ${this.code}`;
        this.msg = this.message;
        this.status = typeof status === 'number' ? status : 0;
        this.cause = cause;
        Object.setPrototypeOf(this, WebrpcError.prototype);
    }
    static new(payload) {
        return new this(payload.error, payload.code, payload.message || payload.msg, payload.status, payload.cause);
    }
}
// Webrpc errors
export class WebrpcEndpointError extends WebrpcError {
    constructor(name = 'WebrpcEndpoint', code = 0, message = `endpoint error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcEndpointError.prototype);
    }
}
export class WebrpcRequestFailedError extends WebrpcError {
    constructor(name = 'WebrpcRequestFailed', code = -1, message = `request failed`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype);
    }
}
export class WebrpcBadRouteError extends WebrpcError {
    constructor(name = 'WebrpcBadRoute', code = -2, message = `bad route`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadRouteError.prototype);
    }
}
export class WebrpcBadMethodError extends WebrpcError {
    constructor(name = 'WebrpcBadMethod', code = -3, message = `bad method`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadMethodError.prototype);
    }
}
export class WebrpcBadRequestError extends WebrpcError {
    constructor(name = 'WebrpcBadRequest', code = -4, message = `bad request`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadRequestError.prototype);
    }
}
export class WebrpcBadResponseError extends WebrpcError {
    constructor(name = 'WebrpcBadResponse', code = -5, message = `bad response`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcBadResponseError.prototype);
    }
}
export class WebrpcServerPanicError extends WebrpcError {
    constructor(name = 'WebrpcServerPanic', code = -6, message = `server panic`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcServerPanicError.prototype);
    }
}
export class WebrpcInternalErrorError extends WebrpcError {
    constructor(name = 'WebrpcInternalError', code = -7, message = `internal error`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype);
    }
}
export class WebrpcClientDisconnectedError extends WebrpcError {
    constructor(name = 'WebrpcClientDisconnected', code = -8, message = `client disconnected`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcClientDisconnectedError.prototype);
    }
}
export class WebrpcStreamLostError extends WebrpcError {
    constructor(name = 'WebrpcStreamLost', code = -9, message = `stream lost`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcStreamLostError.prototype);
    }
}
export class WebrpcStreamFinishedError extends WebrpcError {
    constructor(name = 'WebrpcStreamFinished', code = -10, message = `stream finished`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype);
    }
}
// Schema errors
export class UnauthorizedError extends WebrpcError {
    constructor(name = 'Unauthorized', code = 1000, message = `Unauthorized access`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, UnauthorizedError.prototype);
    }
}
export class PermissionDeniedError extends WebrpcError {
    constructor(name = 'PermissionDenied', code = 1001, message = `Permission denied`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, PermissionDeniedError.prototype);
    }
}
export class SessionExpiredError extends WebrpcError {
    constructor(name = 'SessionExpired', code = 1002, message = `Session expired`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, SessionExpiredError.prototype);
    }
}
export class MethodNotFoundError extends WebrpcError {
    constructor(name = 'MethodNotFound', code = 1003, message = `Method not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, MethodNotFoundError.prototype);
    }
}
export class RequestConflictError extends WebrpcError {
    constructor(name = 'RequestConflict', code = 1004, message = `Conflict with target resource`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, RequestConflictError.prototype);
    }
}
export class AbortedError extends WebrpcError {
    constructor(name = 'Aborted', code = 1005, message = `Request aborted`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AbortedError.prototype);
    }
}
export class GeoblockedError extends WebrpcError {
    constructor(name = 'Geoblocked', code = 1006, message = `Geoblocked region`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, GeoblockedError.prototype);
    }
}
export class RateLimitedError extends WebrpcError {
    constructor(name = 'RateLimited', code = 1007, message = `Rate-limited. Please slow down.`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, RateLimitedError.prototype);
    }
}
export class ProjectNotFoundError extends WebrpcError {
    constructor(name = 'ProjectNotFound', code = 1008, message = `Project not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, ProjectNotFoundError.prototype);
    }
}
export class AccessKeyNotFoundError extends WebrpcError {
    constructor(name = 'AccessKeyNotFound', code = 1101, message = `Access key not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AccessKeyNotFoundError.prototype);
    }
}
export class AccessKeyMismatchError extends WebrpcError {
    constructor(name = 'AccessKeyMismatch', code = 1102, message = `Access key mismatch`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AccessKeyMismatchError.prototype);
    }
}
export class InvalidOriginError extends WebrpcError {
    constructor(name = 'InvalidOrigin', code = 1103, message = `Invalid origin for Access Key`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InvalidOriginError.prototype);
    }
}
export class InvalidServiceError extends WebrpcError {
    constructor(name = 'InvalidService', code = 1104, message = `Service not enabled for Access key`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InvalidServiceError.prototype);
    }
}
export class UnauthorizedUserError extends WebrpcError {
    constructor(name = 'UnauthorizedUser', code = 1105, message = `Unauthorized user`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, UnauthorizedUserError.prototype);
    }
}
export class QuotaExceededError extends WebrpcError {
    constructor(name = 'QuotaExceeded', code = 1200, message = `Quota request exceeded`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, QuotaExceededError.prototype);
    }
}
export class QuotaRateLimitError extends WebrpcError {
    constructor(name = 'QuotaRateLimit', code = 1201, message = `Quota rate limit exceeded`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, QuotaRateLimitError.prototype);
    }
}
export class NoDefaultKeyError extends WebrpcError {
    constructor(name = 'NoDefaultKey', code = 1300, message = `No default access key found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, NoDefaultKeyError.prototype);
    }
}
export class MaxAccessKeysError extends WebrpcError {
    constructor(name = 'MaxAccessKeys', code = 1301, message = `Access keys limit reached`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, MaxAccessKeysError.prototype);
    }
}
export class AtLeastOneKeyError extends WebrpcError {
    constructor(name = 'AtLeastOneKey', code = 1302, message = `You need at least one Access Key`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, AtLeastOneKeyError.prototype);
    }
}
export class TimeoutError extends WebrpcError {
    constructor(name = 'Timeout', code = 1900, message = `Request timed out`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, TimeoutError.prototype);
    }
}
export class InvalidArgumentError extends WebrpcError {
    constructor(name = 'InvalidArgument', code = 2000, message = `Invalid argument`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, InvalidArgumentError.prototype);
    }
}
export class UnavailableError extends WebrpcError {
    constructor(name = 'Unavailable', code = 2002, message = `Unavailable resource`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, UnavailableError.prototype);
    }
}
export class QueryFailedError extends WebrpcError {
    constructor(name = 'QueryFailed', code = 2003, message = `Query failed`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, QueryFailedError.prototype);
    }
}
export class NotFoundError extends WebrpcError {
    constructor(name = 'NotFound', code = 3000, message = `Resource not found`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, NotFoundError.prototype);
    }
}
export class UnsupportedNetworkError extends WebrpcError {
    constructor(name = 'UnsupportedNetwork', code = 3008, message = `Unsupported network`, status = 0, cause) {
        super(name, code, message, status, cause);
        Object.setPrototypeOf(this, UnsupportedNetworkError.prototype);
    }
}
export var errors;
(function (errors) {
    errors["WebrpcEndpoint"] = "WebrpcEndpoint";
    errors["WebrpcRequestFailed"] = "WebrpcRequestFailed";
    errors["WebrpcBadRoute"] = "WebrpcBadRoute";
    errors["WebrpcBadMethod"] = "WebrpcBadMethod";
    errors["WebrpcBadRequest"] = "WebrpcBadRequest";
    errors["WebrpcBadResponse"] = "WebrpcBadResponse";
    errors["WebrpcServerPanic"] = "WebrpcServerPanic";
    errors["WebrpcInternalError"] = "WebrpcInternalError";
    errors["WebrpcClientDisconnected"] = "WebrpcClientDisconnected";
    errors["WebrpcStreamLost"] = "WebrpcStreamLost";
    errors["WebrpcStreamFinished"] = "WebrpcStreamFinished";
    errors["Unauthorized"] = "Unauthorized";
    errors["PermissionDenied"] = "PermissionDenied";
    errors["SessionExpired"] = "SessionExpired";
    errors["MethodNotFound"] = "MethodNotFound";
    errors["RequestConflict"] = "RequestConflict";
    errors["Aborted"] = "Aborted";
    errors["Geoblocked"] = "Geoblocked";
    errors["RateLimited"] = "RateLimited";
    errors["ProjectNotFound"] = "ProjectNotFound";
    errors["AccessKeyNotFound"] = "AccessKeyNotFound";
    errors["AccessKeyMismatch"] = "AccessKeyMismatch";
    errors["InvalidOrigin"] = "InvalidOrigin";
    errors["InvalidService"] = "InvalidService";
    errors["UnauthorizedUser"] = "UnauthorizedUser";
    errors["QuotaExceeded"] = "QuotaExceeded";
    errors["QuotaRateLimit"] = "QuotaRateLimit";
    errors["NoDefaultKey"] = "NoDefaultKey";
    errors["MaxAccessKeys"] = "MaxAccessKeys";
    errors["AtLeastOneKey"] = "AtLeastOneKey";
    errors["Timeout"] = "Timeout";
    errors["InvalidArgument"] = "InvalidArgument";
    errors["Unavailable"] = "Unavailable";
    errors["QueryFailed"] = "QueryFailed";
    errors["NotFound"] = "NotFound";
    errors["UnsupportedNetwork"] = "UnsupportedNetwork";
})(errors || (errors = {}));
export var WebrpcErrorCodes;
(function (WebrpcErrorCodes) {
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcEndpoint"] = 0] = "WebrpcEndpoint";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcRequestFailed"] = -1] = "WebrpcRequestFailed";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadRoute"] = -2] = "WebrpcBadRoute";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadMethod"] = -3] = "WebrpcBadMethod";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadRequest"] = -4] = "WebrpcBadRequest";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcBadResponse"] = -5] = "WebrpcBadResponse";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcServerPanic"] = -6] = "WebrpcServerPanic";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcInternalError"] = -7] = "WebrpcInternalError";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcClientDisconnected"] = -8] = "WebrpcClientDisconnected";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcStreamLost"] = -9] = "WebrpcStreamLost";
    WebrpcErrorCodes[WebrpcErrorCodes["WebrpcStreamFinished"] = -10] = "WebrpcStreamFinished";
    WebrpcErrorCodes[WebrpcErrorCodes["Unauthorized"] = 1000] = "Unauthorized";
    WebrpcErrorCodes[WebrpcErrorCodes["PermissionDenied"] = 1001] = "PermissionDenied";
    WebrpcErrorCodes[WebrpcErrorCodes["SessionExpired"] = 1002] = "SessionExpired";
    WebrpcErrorCodes[WebrpcErrorCodes["MethodNotFound"] = 1003] = "MethodNotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["RequestConflict"] = 1004] = "RequestConflict";
    WebrpcErrorCodes[WebrpcErrorCodes["Aborted"] = 1005] = "Aborted";
    WebrpcErrorCodes[WebrpcErrorCodes["Geoblocked"] = 1006] = "Geoblocked";
    WebrpcErrorCodes[WebrpcErrorCodes["RateLimited"] = 1007] = "RateLimited";
    WebrpcErrorCodes[WebrpcErrorCodes["ProjectNotFound"] = 1008] = "ProjectNotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["AccessKeyNotFound"] = 1101] = "AccessKeyNotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["AccessKeyMismatch"] = 1102] = "AccessKeyMismatch";
    WebrpcErrorCodes[WebrpcErrorCodes["InvalidOrigin"] = 1103] = "InvalidOrigin";
    WebrpcErrorCodes[WebrpcErrorCodes["InvalidService"] = 1104] = "InvalidService";
    WebrpcErrorCodes[WebrpcErrorCodes["UnauthorizedUser"] = 1105] = "UnauthorizedUser";
    WebrpcErrorCodes[WebrpcErrorCodes["QuotaExceeded"] = 1200] = "QuotaExceeded";
    WebrpcErrorCodes[WebrpcErrorCodes["QuotaRateLimit"] = 1201] = "QuotaRateLimit";
    WebrpcErrorCodes[WebrpcErrorCodes["NoDefaultKey"] = 1300] = "NoDefaultKey";
    WebrpcErrorCodes[WebrpcErrorCodes["MaxAccessKeys"] = 1301] = "MaxAccessKeys";
    WebrpcErrorCodes[WebrpcErrorCodes["AtLeastOneKey"] = 1302] = "AtLeastOneKey";
    WebrpcErrorCodes[WebrpcErrorCodes["Timeout"] = 1900] = "Timeout";
    WebrpcErrorCodes[WebrpcErrorCodes["InvalidArgument"] = 2000] = "InvalidArgument";
    WebrpcErrorCodes[WebrpcErrorCodes["Unavailable"] = 2002] = "Unavailable";
    WebrpcErrorCodes[WebrpcErrorCodes["QueryFailed"] = 2003] = "QueryFailed";
    WebrpcErrorCodes[WebrpcErrorCodes["NotFound"] = 3000] = "NotFound";
    WebrpcErrorCodes[WebrpcErrorCodes["UnsupportedNetwork"] = 3008] = "UnsupportedNetwork";
})(WebrpcErrorCodes || (WebrpcErrorCodes = {}));
export const webrpcErrorByCode = {
    [0]: WebrpcEndpointError,
    [-1]: WebrpcRequestFailedError,
    [-2]: WebrpcBadRouteError,
    [-3]: WebrpcBadMethodError,
    [-4]: WebrpcBadRequestError,
    [-5]: WebrpcBadResponseError,
    [-6]: WebrpcServerPanicError,
    [-7]: WebrpcInternalErrorError,
    [-8]: WebrpcClientDisconnectedError,
    [-9]: WebrpcStreamLostError,
    [-10]: WebrpcStreamFinishedError,
    [1000]: UnauthorizedError,
    [1001]: PermissionDeniedError,
    [1002]: SessionExpiredError,
    [1003]: MethodNotFoundError,
    [1004]: RequestConflictError,
    [1005]: AbortedError,
    [1006]: GeoblockedError,
    [1007]: RateLimitedError,
    [1008]: ProjectNotFoundError,
    [1101]: AccessKeyNotFoundError,
    [1102]: AccessKeyMismatchError,
    [1103]: InvalidOriginError,
    [1104]: InvalidServiceError,
    [1105]: UnauthorizedUserError,
    [1200]: QuotaExceededError,
    [1201]: QuotaRateLimitError,
    [1300]: NoDefaultKeyError,
    [1301]: MaxAccessKeysError,
    [1302]: AtLeastOneKeyError,
    [1900]: TimeoutError,
    [2000]: InvalidArgumentError,
    [2002]: UnavailableError,
    [2003]: QueryFailedError,
    [3000]: NotFoundError,
    [3008]: UnsupportedNetworkError,
};
